import configparser
import csv
import pprint

from collections import defaultdict
from io import StringIO

import numpy as np
import pandas

import config

####################################################
#  User editable options for the station configuration
#
# Change values below to set the parameters used when
# generating the station config file
####################################################
# Search for all channels matching the below mask
CHANNEL_MASK = '[SB]HZ'

# The default channel to use if more than one are found
DEFAULT_CHANNEL = 'BHZ'

# Which networks to search for stations
NETWORKS = ['AV', 'AK']

# Maximum number of stations to show per volcano plot
MAX_STATIONS = 5

# Only include stations that have received data within this time period (seconds)
MAX_AGE = 1 * 24 * 60 * 60  # 1 days

# Maximum distance from volcano to search for stations.
# Can be over-ridden on a per-volcano basis in the VOLCS list, below
DEFAULT_RADIUS = 150

# Dictionary of volcanos to look at, and the radius
# around them to search for active stations.
# If latitude and longitude is specified,
# it will be used, otherwise we will try to pull latitude/longitude information
# from the database specified in the config. An empty dict means use defaults
# and pull latitude/longitude from DB.
VOLCS = {
    'Wrangell': {},
    'Spurr': {},
    'Redoubt': {},
    'Iliamna': {},
    'Augustine': {},
    'Fourpeaked': {},
    'Katmai Region': {'latitude': 58.2790, 'longitude': -154.9533, 'radius': 100},
    'Peulik': {},
    'Aniakchak': {},
    'Veniaminof': {},
    'Pavlof': {},
    'Dutton': {},
    'Shishaldin': {},
    'Westdahl': {},
    'Akutan': {},
    'Makushin': {},
    'Okmok': {},
    'Cleveland': {},
    'Korovin': {},
    'Great Sitkin': {},
    'Kanaga': {},
    'Tanaga': {},
    'Gareloi': {},
    'Semisopochnoi': {},
    'Little Sitkin': {},
    'Kantishna': {'latitude': 63.4000, 'longitude': -151.2000, 'radius': 160},
    'Susitna': {'latitude': 62.8295, 'longitude': -148.5509, 'radius': 160, 'zoom': 8},
    'PrinceWmSn': {'latitude': 61.0400, 'longitude': -147.7300, 'radius': 160}
}

##########################################################
# END USER SETTINGS
##########################################################


def generate_stations():
    # Get volcano locations
    VOLCS_NEEDING_LOC = [key for key, value in VOLCS.items() if 'latitude' not in value]

    # Don't try to do the query if there are no volcs needing lat/lon information
    if VOLCS_NEEDING_LOC:
        import pymysql  # Import here just in case we don't actually need it

        DB_HOST = config.DB_HOST
        DB_USER = config.DB_USER
        DB_PASS = config.DB_PASSWORD
        DB_NAME = config.DB_NAME

        dbconn = pymysql.connect(user = DB_USER, password = DB_PASS,
                                 host = DB_HOST, database = DB_NAME)
        cursor = dbconn.cursor()
        cursor.execute('SELECT volcano_name, latitude, longitude FROM volcano WHERE volcano_name in %s',
                       (VOLCS_NEEDING_LOC, ))

        for volc, lat, lon in cursor:
            VOLCS[volc]['latitude'] = lat
            VOLCS[volc]['longitude'] = lon

    for volc in VOLCS:
        if VOLCS[volc].get('zoom') is None:
            VOLCS[volc]['zoom'] = 10

    with open('VolcSeismo/station_config.py', 'w') as conf_file:
        conf_file.write('"""\nThis file is automatically generated by running gen_station_config.py\n')
        conf_file.write('You may modify this file if desired, but be aware any changes will\n')
        conf_file.write('be over-written the next time gen_station_config is run\n"""')
        conf_file.write('\n\n')
        pprinter = pprint.PrettyPrinter(stream = conf_file)
        conf_file.write('locations=')
        pprinter.pprint(VOLCS)


if __name__ == "__main__":
    generate_stations()
